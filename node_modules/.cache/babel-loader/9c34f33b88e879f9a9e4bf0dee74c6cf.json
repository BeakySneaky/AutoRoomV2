{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alexandre\\\\Documents\\\\HomeProjects\\\\AutoRoomV2\\\\src\\\\App.js\";\nimport React from 'react';\nimport SnackBar from './SnackBar';\nimport './App.css';\nimport { w3cwebsocket as WebSocket } from \"websocket\";\nlet webSocketFactory = {\n  connectionTries: 3,\n  connect: function (url) {\n    var ws = new WebSocket(url);\n    ws.addEventListener(\"error\", e => {\n      // readyState === 3 is CLOSED\n      if (e.target.readyState === 3) {\n        this.connectionTries--;\n\n        if (this.connectionTries > 0) {\n          setTimeout(() => this.connect(url), 5000);\n        } else {\n          throw new Error(\"Maximum number of connection trials has been reached\");\n        }\n      }\n    });\n  }\n};\nlet client = webSocketFactory.connect('ws://127.0.0.1:8000');\nexport default class App extends React.Component {\n  constructor() {\n    super();\n\n    this.wol = () => {\n      fetch('http://localhost:3002/WOL', {\n        method: 'POST'\n      }).then(() => {\n        this.sendSnackBar('WOL request sent !');\n      });\n    };\n\n    this.sendSnackBar = message => {\n      setTimeout(() => {\n        this.setState({\n          SnackBarOn: false\n        });\n      }, 3000);\n      this.setState({\n        SnackBarOn: true,\n        SnackBarText: message\n      });\n    };\n\n    console.log(client); //this.getExpressServerStatus()\n\n    this.state = {\n      SnackBarOn: false,\n      SnackBarText: null,\n      WakeOnLanAvailable: false\n    };\n  }\n  /*componentWillMount(){\n  \tclient.onopen = () => {\n  \t\tconsole.log('WebSocket Client Connected')\n  \t\tthis.setState({WakeOnLanAvailable: true})\n  \t}\n  \tclient.onmessage = (message) => {\n  \t\tconsole.log(message)\n  \t}\n  \tclient.onclose = () =>{\n  \t\tthis.setState({ WakeOnLanAvailable: false })\n  \t}\n  }*/\n\n\n  render() {\n    if (this.state.WakeOnLanAvailable === true) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.wol,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"Wake On Lan\"), this.state.SnackBarOn === true ? React.createElement(SnackBar, {\n        text: this.state.SnackBarText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }) : '');\n    } else {\n      return null;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Alexandre/Documents/HomeProjects/AutoRoomV2/src/App.js"],"names":["React","SnackBar","w3cwebsocket","WebSocket","webSocketFactory","connectionTries","connect","url","ws","addEventListener","e","target","readyState","setTimeout","Error","client","App","Component","constructor","wol","fetch","method","then","sendSnackBar","message","setState","SnackBarOn","SnackBarText","console","log","state","WakeOnLanAvailable","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,WAAP;AACA,SAAQC,YAAY,IAAIC,SAAxB,QAAwC,WAAxC;AAEA,IAAIC,gBAAgB,GAAG;AACtBC,EAAAA,eAAe,EAAE,CADK;AAEtBC,EAAAA,OAAO,EAAE,UAASC,GAAT,EAAc;AACrB,QAAIC,EAAE,GAAG,IAAIL,SAAJ,CAAcI,GAAd,CAAT;AACAC,IAAAA,EAAE,CAACC,gBAAH,CAAoB,OAApB,EAA6BC,CAAC,IAAI;AACnC;AACA,UAAIA,CAAC,CAACC,MAAF,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC7B,aAAKP,eAAL;;AAEA,YAAI,KAAKA,eAAL,GAAuB,CAA3B,EAA8B;AAC/BQ,UAAAA,UAAU,CAAC,MAAM,KAAKP,OAAL,CAAaC,GAAb,CAAP,EAA0B,IAA1B,CAAV;AACE,SAFD,MAEO;AACR,gBAAM,IAAIO,KAAJ,CAAU,sDAAV,CAAN;AACE;AAEF;AACC,KAZD;AAaD;AAjBqB,CAAvB;AAoBA,IAAIC,MAAM,GAAGX,gBAAgB,CAACE,OAAjB,CAAyB,qBAAzB,CAAb;AACA,eAAe,MAAMU,GAAN,SAAkBhB,KAAK,CAACiB,SAAxB,CAAkC;AAChDC,EAAAA,WAAW,GAAG;AACb;;AADa,SAyCdC,GAzCc,GAyCR,MAAM;AACXC,MAAAA,KAAK,CAAC,2BAAD,EAA8B;AAClCC,QAAAA,MAAM,EAAE;AAD0B,OAA9B,CAAL,CAEGC,IAFH,CAEQ,MAAM;AACb,aAAKC,YAAL,CAAkB,oBAAlB;AACA,OAJD;AAKA,KA/Ca;;AAAA,SA8DdA,YA9Dc,GA8DEC,OAAD,IAAa;AAC3BX,MAAAA,UAAU,CAAC,MAAM;AAChB,aAAKY,QAAL,CAAc;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAd;AACA,OAFS,EAEP,IAFO,CAAV;AAGA,WAAKD,QAAL,CAAc;AAAEC,QAAAA,UAAU,EAAE,IAAd;AAAoBC,QAAAA,YAAY,EAAEH;AAAlC,OAAd;AACA,KAnEa;;AAEbI,IAAAA,OAAO,CAACC,GAAR,CAAYd,MAAZ,EAFa,CAGb;;AACA,SAAKe,KAAL,GAAa;AACZJ,MAAAA,UAAU,EAAE,KADA;AAEZC,MAAAA,YAAY,EAAE,IAFF;AAGZI,MAAAA,kBAAkB,EAAE;AAHR,KAAb;AAKA;AAED;;;;;;;;;;;;;;AAaAC,EAAAA,MAAM,GAAG;AACR,QAAI,KAAKF,KAAL,CAAWC,kBAAX,KAAkC,IAAtC,EAA4C;AAC3C,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAQ,QAAA,OAAO,EAAE,KAAKZ,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADD,EAEE,KAAKW,KAAL,CAAWJ,UAAX,KAA0B,IAA1B,GACA,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAE,KAAKI,KAAL,CAAWH,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,GAGA,EALF,CADD;AAUA,KAXD,MAWO;AACN,aAAO,IAAP;AACA;AACD;;AAxC+C","sourcesContent":["import React from 'react'\nimport SnackBar from './SnackBar'\nimport './App.css'\nimport {w3cwebsocket as WebSocket} from \"websocket\"\n\nlet webSocketFactory = {\n\tconnectionTries: 3,\n\tconnect: function(url) {\n\t  var ws = new WebSocket(url);\n\t  ws.addEventListener(\"error\", e => {\n\t\t// readyState === 3 is CLOSED\n\t\tif (e.target.readyState === 3) {\n\t\t  this.connectionTries--;\n  \n\t\t  if (this.connectionTries > 0) {\n\t\t\tsetTimeout(() => this.connect(url), 5000);\n\t\t  } else {\n\t\t\tthrow new Error(\"Maximum number of connection trials has been reached\");\n\t\t  }\n  \n\t\t}\n\t  });\n\t}\n  };\n\nlet client = webSocketFactory.connect('ws://127.0.0.1:8000')\nexport default class App extends React.Component {\n\tconstructor() {\n\t\tsuper()\n\t\tconsole.log(client)\n\t\t//this.getExpressServerStatus()\n\t\tthis.state = {\n\t\t\tSnackBarOn: false,\n\t\t\tSnackBarText: null,\n\t\t\tWakeOnLanAvailable: false\n\t\t}\n\t}\n\t\n\t/*componentWillMount(){\n\t\tclient.onopen = () => {\n\t\t\tconsole.log('WebSocket Client Connected')\n\t\t\tthis.setState({WakeOnLanAvailable: true})\n\t\t}\n\t\tclient.onmessage = (message) => {\n\t\t\tconsole.log(message)\n\t\t}\n\t\tclient.onclose = () =>{\n\t\t\tthis.setState({ WakeOnLanAvailable: false })\n\t\t}\n\t}*/\n\n\trender() {\n\t\tif (this.state.WakeOnLanAvailable === true) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<button onClick={this.wol}>Wake On Lan</button>\n\t\t\t\t\t{this.state.SnackBarOn === true ? (\n\t\t\t\t\t\t<SnackBar text={this.state.SnackBarText} />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t''\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n\n\twol = () => {\n\t\tfetch('http://localhost:3002/WOL', {\n\t\t\tmethod: 'POST'\n\t\t}).then(() => {\n\t\t\tthis.sendSnackBar('WOL request sent !')\n\t\t})\n\t}\n\n\t/*getExpressServerStatus = () => {\n\t\tfetch('http://localhost:3002/status', {\n\t\t\tmethod: 'GET'\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tthis.setState({ WakeOnLanAvailable: true })\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err)\n\t\t\t})\n\t\treturn true\n\t}*/\n\n\tsendSnackBar = (message) => {\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({ SnackBarOn: false })\n\t\t}, 3000)\n\t\tthis.setState({ SnackBarOn: true, SnackBarText: message })\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}